{"version":3,"sources":["components/Card.js","utils/constants.js","components/CardList.js","components/Header.js","App.js","utils/apiKey.js","serviceWorker.js","index.js"],"names":["container","display","flexDirection","alignItems","width","height","borderRadius","backgroundColor","boxShadow","margin","&:hover","imageContainer","overflow","position","images","objectFit","objectPosition","titles","justifyContent","Card","sentiment","feel","react_default","a","createElement","style","alt","this","props","image","src","name","className","total","Component","HAPPY_FLOOR","SAD_CEILING","list","flexWrap","characters","Jon","Daenerys","Cersei","Arya","Sansa","Bran","Tyrion","Jaime","Donald","getImageIdx","str","CardList","Object","keys","map","key","i","char","charFeel","data","toLowerCase","net","charTotal","components_Card","values","headerText","clear","headerTitle","headerSub","fontFamily","fontWeight","fontSize","color","Header","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","GotSentiment","state","jon","cersei","daenerys","arya","sansa","bran","tyrion","jaime","donald","lastUpdate","getData","_this2","database","ref","on","snapshot","console","log","val","dataObj","moment","Date","format","setState","components_Header","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73a2e2f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst container = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  width: \"359px\",\n  height: \"200px\",\n  borderRadius: \"8px\",\n  backgroundColor: \"white\",\n  boxShadow: \"0px 4px 8px 0px rgba(0,0,0,0.15)\",\n  margin: \"20px 20px\",\n  \"&:hover\": {\n    backgroundColor: \"red\"\n  }\n};\n\nconst imageContainer = {\n  height: \"184px\",\n  width: \"184px\",\n  borderRadius: \"50%\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  margin: \"4px 16px 4px 4px\"\n};\n\nconst images = {\n  objectFit: \"cover\",\n  objectPosition: \"40% 50%\",\n  width: \"100%\",\n  height: \"100%\"\n};\n\nconst titles = {\n  height: \"30%\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"flex-start\"\n};\n\nclass Card extends Component {\n  sentiment = feel => {\n    switch (feel) {\n      case \"HAPPY\":\n        return \"sentimentHappy\";\n      case \"NEUTRAL\":\n        return \"sentimentNeutral\";\n      case \"SAD\":\n        return \"sentimentSad\";\n      default:\n        return \"sentimentNeutral\";\n    }\n  };\n\n  render() {\n    return (\n      <div style={container}>\n        <div style={imageContainer}>\n          <img alt={this.props.image} src={this.props.image} style={images} />\n        </div>\n        <div style={titles}>\n          <h3>{this.props.name}</h3>\n          <h2 className={this.sentiment(this.props.sentiment)}>\n            {this.props.sentiment}\n          </h2>\n          <h4>TWEETS: {this.props.total}</h4>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","export const HAPPY_FLOOR = 0;\nexport const SAD_CEILING = -5;","import React from \"react\";\nimport Card from \"./Card.js\";\nimport { HAPPY_FLOOR, SAD_CEILING } from \"../utils/constants\";\n\nconst list = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // width: \"100%\",\n  justifyContent: \"center\",\n  margin: \"2% 3%\"\n};\n\nlet characters = {\n  Jon: [\"./jonHappy.gif\", \"./jonNeutral.gif\", \"./jonSad.gif\"],\n  Daenerys: [\"./danyHappy.gif\", \"./danyNeutral.gif\", \"./danySad.gif\"],\n  Cersei: [\"./cerseiHappy.gif\", \"./cerseiNeutral.gif\", \"./cerseiSad.gif\"],\n  Arya: [\"./aryaHappy.gif\", \"./aryaNeutral.gif\", \"./aryaSad.gif\"],\n  Sansa: [\"./sansaHappy.gif\", \"./sansaNeutral.gif\", \"./sansaSad.gif\"],\n  Bran: [\"./branHappy.gif\", \"./branNeutral.gif\", \"./branSad.gif\"],\n  Tyrion: [\"./tyrionHappy.gif\", \"./tyrionNeutral.gif\", \"./tyrionSad.gif\"],\n  Jaime: [\"./jaimeHappy.gif\", \"./jaimeNeutral.gif\", \"./jaimeSad.gif\"],\n  Donald: [\"./donaldHappy.gif\", \"./donaldNeutral.gif\", \"./donaldSad.gif\"]\n};\n\nfunction getImageIdx(str) {\n  switch (str) {\n    case \"HAPPY\":\n      return 0;\n    case \"NEUTRAL\":\n      return 1;\n    case \"SAD\":\n      return 2;\n    default:\n      return 2;\n  }\n}\n\nfunction getCharData(char) {\n  if (char.net == null) {\n    return \"NEUTRAL\";\n  }\n  if (char.net > HAPPY_FLOOR) {\n    return \"HAPPY\";\n  } else if (char.net <= SAD_CEILING) {\n    return \"SAD\";\n  } else {\n    return \"NEUTRAL\";\n  }\n}\n\nconst CardList = props => {\n  return (\n    <div style={list}>\n      {Object.keys(characters).map((key, i) => {\n        const charFeel = getCharData(props.data[key.toLowerCase()]);\n        const charTotal = props.data[key.toLowerCase()][\"total\"];\n        return (\n          <Card\n            key={i}\n            name={key}\n            sentiment={charFeel}\n            image={Object.values(characters)[i][getImageIdx(charFeel)]}\n            total={charTotal}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst container = {\n  width: \"100%\",\n  height: \"80px\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  backgroundColor: \"white\",\n  boxShadow: \"0px 3px 6px 0px rgba(0,0,0,0.15)\",\n  position: \"static\",\n  margin: \"0px 0px\"\n};\n\nconst headerText = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  margin: \"auto 5%\",\n  height: \"100%\",\n  clear: \"both\"\n};\n\nconst headerTitle = {\n  margin: \"0px 0px\"\n};\n\nconst headerSub = {\n  fontFamily: \"Trajan Pro\",\n  fontWeight: \"400\",\n  fontSize: \"16px\",\n  color: \"#272320\",\n  margin: \"4px 0px 0px 0px\"\n};\n\nconst nav = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"space-between\",\n  marginRight: \"5%\"\n};\n\nconst navText = {\n  margin: \"0px 10px\",\n  fontFamily: \"Trajan Pro\",\n  fontSize: \"20px\",\n  color: \"#272320\",\n  textAlign: \"center\"\n};\n\nconst Header = props => {\n  return (\n    <div style={container}>\n      <div style={headerText}>\n        <h3 style={headerTitle}>Game of Thrones</h3>\n        <p style={headerSub}>Twitter Feels Analysis</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n\n// <div style={nav}>\n// <p style={navText}>Home</p>\n//         <p style={navText}>About</p>\n//       </div>\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList.js\";\nimport Header from \"./components/Header.js\";\nimport moment from \"moment\";\nimport { firebase_config } from \"./utils/apiKey.js\";\nimport Firebase from \"firebase\";\n\n// Initialize Firebase\nFirebase.initializeApp(firebase_config);\n\nclass GotSentiment extends Component {\n  state = {\n    jon: {},\n    cersei: {},\n    daenerys: {},\n    arya: {},\n    sansa: {},\n    bran: {},\n    tyrion: {},\n    jaime: {},\n    donald: {},\n    lastUpdate: \"\"\n  };\n\n  componentWillMount() {\n    this.getData();\n    //setInterval(this.getData.bind(this), 10000);\n  }\n\n  getData() {\n    const charRef = Firebase.database().ref(\"/characters\");\n    charRef.on(\"value\", snapshot => {\n      console.log(snapshot.val());\n      const dataObj = snapshot.val();\n      dataObj.lastUpdate = moment(new Date()).format(\"MM/DD/YYYY h:mm:ss a\");\n      this.setState(dataObj, () => {\n        console.log(this.state);\n      });\n      //LEFT OFF HERE\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <CardList data={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default GotSentiment;\n\n//TODO IF SHIT GETS CRAZY\n// ADD A SEARCH BOX SO USERS CAN FIND CHARACTERS\n// -----\n// onSearchChange = event => {\n//   this.setState({\n//     searchField: event.target.value\n//   });\n// };\n","export const firebase_config = {\r\n  apiKey: \"AIzaSyCGXuGAww1Q36nCUt35ZHw4VAOtqPxApY0\",\r\n  authDomain: \"gotsentiment.firebaseapp.com\",\r\n  databaseURL: \"https://gotsentiment.firebaseio.com\",\r\n  projectId: \"gotsentiment\",\r\n  storageBucket: \"gotsentiment.appspot.com\",\r\n  messagingSenderId: \"521626027009\"\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}